name: CI - Code Quality and Tests

on:
  push:
    branches: [ main, azure-sdk ]
  pull_request:
    branches: [ main, azure-sdk ]

jobs:
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/dev-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r dev-requirements.txt
        
    - name: Check code formatting with Black
      id: black
      run: |
        black --check --line-length 120 --diff . > black-output.txt 2>&1 && echo "status=‚úÖ PASSED" >> $GITHUB_OUTPUT || echo "status=‚ùå FAILED" >> $GITHUB_OUTPUT
        cat black-output.txt
      continue-on-error: true
        
    - name: Check import sorting with isort
      id: isort
      run: |
        isort --check-only --profile black --diff . > isort-output.txt 2>&1 && echo "status=‚úÖ PASSED" >> $GITHUB_OUTPUT || echo "status=‚ùå FAILED" >> $GITHUB_OUTPUT
        cat isort-output.txt
      continue-on-error: true
        
    - name: Run Flake8 (PEP8 style check)
      id: flake8
      run: |
        flake8 --config=.flake8 --statistics . > flake8-output.txt 2>&1 && echo "status=‚úÖ PASSED" >> $GITHUB_OUTPUT || echo "status=‚ùå FAILED" >> $GITHUB_OUTPUT
        cat flake8-output.txt
      continue-on-error: true
        
    - name: Run Pylint (code quality check)
      id: pylint
      run: |
        pylint --rcfile=pylintrc aks_diagnostics/ aks-net-diagnostics.py > pylint-output.txt 2>&1 && echo "status=‚úÖ PASSED" >> $GITHUB_OUTPUT || echo "status=‚ö†Ô∏è WARNINGS" >> $GITHUB_OUTPUT
        cat pylint-output.txt
      continue-on-error: true
        
    - name: Run tests with pytest
      id: pytest
      run: |
        pytest -v --cov=aks_diagnostics --cov-report=term --cov-report=xml > pytest-output.txt 2>&1 && echo "status=‚úÖ PASSED" >> $GITHUB_OUTPUT || echo "status=‚ùå FAILED" >> $GITHUB_OUTPUT
        cat pytest-output.txt
      continue-on-error: true
        
    - name: Upload coverage to Codecov (optional)
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true
        
    - name: Generate Summary
      if: always()
      run: |
        echo "## üìä Code Quality Check Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Black Formatting** | ${{ steps.black.outputs.status || '‚è≠Ô∏è SKIPPED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **isort Import Sorting** | ${{ steps.isort.outputs.status || '‚è≠Ô∏è SKIPPED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Flake8 (PEP8)** | ${{ steps.flake8.outputs.status || '‚è≠Ô∏è SKIPPED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Pylint** | ${{ steps.pylint.outputs.status || '‚è≠Ô∏è SKIPPED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Pytest** | ${{ steps.pytest.outputs.status || '‚è≠Ô∏è SKIPPED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Black details
        if [ "${{ steps.black.outputs.status }}" != "‚úÖ PASSED" ] && [ -f black-output.txt ] && [ -s black-output.txt ]; then
          echo "### ‚ùå Black Formatting Issues" >> $GITHUB_STEP_SUMMARY
          echo '```diff' >> $GITHUB_STEP_SUMMARY
          head -n 100 black-output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # isort details
        if [ "${{ steps.isort.outputs.status }}" != "‚úÖ PASSED" ] && [ -f isort-output.txt ] && [ -s isort-output.txt ]; then
          echo "### ‚ùå isort Import Sorting Issues" >> $GITHUB_STEP_SUMMARY
          echo '```diff' >> $GITHUB_STEP_SUMMARY
          head -n 100 isort-output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Flake8 details
        if [ "${{ steps.flake8.outputs.status }}" != "‚úÖ PASSED" ] && [ -f flake8-output.txt ] && [ -s flake8-output.txt ]; then
          echo "### ‚ùå Flake8 Violations" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -n 100 flake8-output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Pylint details
        if [ "${{ steps.pylint.outputs.status }}" == "‚ö†Ô∏è WARNINGS" ] && [ -f pylint-output.txt ] && [ -s pylint-output.txt ]; then
          echo "### ‚ö†Ô∏è Pylint Warnings" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -n 50 pylint-output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Pytest details
        if [ "${{ steps.pytest.outputs.status }}" != "‚úÖ PASSED" ] && [ -f pytest-output.txt ] && [ -s pytest-output.txt ]; then
          echo "### ‚ùå Test Failures" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -n 100 pytest-output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Workflow run: ${{ github.run_number }} | Commit: ${{ github.sha }}*" >> $GITHUB_STEP_SUMMARY
        
    - name: Fail workflow if critical checks failed
      if: steps.black.outputs.status == '‚ùå FAILED' || steps.isort.outputs.status == '‚ùå FAILED' || steps.flake8.outputs.status == '‚ùå FAILED' || steps.pytest.outputs.status == '‚ùå FAILED'
      run: |
        echo "::error::One or more critical quality checks failed. See summary for details."
        exit 1
